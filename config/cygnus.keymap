/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

/ {
    combos {
        compatible = "zmk,combos";

        pipe {
            bindings = <&altsae>;
            key-positions = <17 18>;
        };
    };

    macros {
        winaltsae: winaltsae {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(S) &kp RA(A) &kp RA(E)>;
            label = "WINALTSAE";
        };

        altsae: altsae {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(LG(S)) &kp RA(LG(A)) &kp RA(LG(E))>;
            label = "ALTSAE";
        };

        mmattest: mmattest {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp F2 &kp BACKSPACE &kp PERIOD &kp M &kp M &kp A &kp T &kp T &kp E &kp S &kp T>,
                <&macro_wait_time 500>,
                <&kp ENTER>,
                <&macro_wait_time 500>,
                <&kp F2>;

            label = "MMATTEST";
        };
    };

    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
            hold-trigger-key-positions = <6 18 30 31 19 7 20 32 8 9 21 33 34 22 10 11 23 35>;
        };

        lhtl: lhtl {
            compatible = "zmk,behavior-hold-tap";
            label = "LHTL";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <200>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
        };

        lhtr: lhtr {
            compatible = "zmk,behavior-hold-tap";
            label = "LHTR";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <200>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&kp>;

            quick-tap-ms = <180>;
            global-quick-tap;
            hold-trigger-key-positions = <0 1 4 5 12 13 14 15 16 17 24 25 26 27 28 29 2 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp TAB               &kp SEMI                 &kp COMMA            &kp DOT           &lhtl 1 P     &kp Y              &kp F          &lhtr 1 G      &kp C             &kp R  &kp L             &kp FSLH
&mt LEFT_SHIFT ENTER  &hml LC(LEFT_COMMAND) A  &hml LEFT_CONTROL O  &hml LS(LMETA) E  &hml LMETA U  &kp I              &kp D          &hmr RMETA H   &hmr LS(RMETA) T  &kp N  &hmr RC(RMETA) S  &mt RIGHT_SHIFT SPACE
&kp LSHFT             &kp SQT                  &kp Q                &kp J             &lhtl 3 K     &kp X              &kp B          &lhtr 3 M      &kp W             &kp V  &kp Z             &kp RIGHT_SHIFT
                                               &lhtl 1 BACKSPACE    &lt 3 ENTER       &kp ESCAPE    &lhtl 2 BACKSPACE  &lhtl 3 SPACE  &lhtl 0 SPACE
            >;
        };

        mod {
            bindings = <
&trans  &trans      &trans        &kp UP    &trans     &trans             &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
&trans  &bt BT_NXT  &kp LEFT      &kp DOWN  &kp RIGHT  &kp C_VOLUME_UP    &kp C_BRI_UP  &bt BT_CLR    &trans        &trans        &trans        &trans
&trans  &bt BT_PRV  &out OUT_TOG  &trans    &trans     &kp C_VOLUME_DOWN  &kp C_BRI_DN  &trans        &trans        &trans        &trans        &trans
                    &trans        &trans    &trans     &trans             &trans        &trans
            >;
        };

        layer_2 {
            bindings = <
&trans  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT  &kp CARET  &kp AMPERSAND    &kp STAR     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &kp ESCAPE       &trans       &kp HOME  &kp END     &kp UNDER    &kp MINUS  &kp RIGHT_SHIFT  &kp PAGE_UP  &kp PAGE_DOWN         &kp INSERT             &trans
&trans  &kp BACKSPACE    &trans       &trans    &trans      &kp TILDE    &kp GRAVE  &none            &none        &none                 &kp DEL                &trans
                         &trans       &trans    &trans      &trans       &trans     &trans
            >;
        };

        num {
            bindings = <
&kp LC(TAB)      &kp DOLLAR  &kp LEFT_PARENTHESIS  &kp PERCENT  &kp RIGHT_PARENTHESIS  &kp EQUAL  &kp PLUS   &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &trans
&kp LC(LS(TAB))  &kp TILDE   &kp LEFT_BRACKET      &kp AMPS     &kp RIGHT_BRACKET      &kp BSLH   &kp ASTRK  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp PERIOD    &trans
&trans           &kp EXCL    &kp LEFT_BRACE        &kp MINUS    &kp RIGHT_BRACE        &kp PIPE   &kp UNDER  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH     &trans
                             &trans                &mmattest    &trans                 &trans     &mmattest  &trans
            >;
        };
    };
};
